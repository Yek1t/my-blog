(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{679:function(n,t,l){"use strict";l.r(t);var s=l(32),o=Object(s.a)({},(function(){var n=this,t=n.$createElement,l=n._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[l("ul",[l("li",[n._v("共享锁/读锁：互不阻塞，优先级低。")]),n._v(" "),l("li",[n._v("排他锁/写锁：阻塞其他锁，优先级高，即确保在一个事务写入时不受其他事务的影响。")]),n._v(" "),l("li",[n._v("锁粒度：锁定的数据量越少（粒度越小），并发程度越高，但相应的加锁、检测锁、释放锁用的系统开销也随之增大。")]),n._v(" "),l("li",[n._v("锁策略：锁开销与数据安全性之间的平衡。")]),n._v(" "),l("li",[n._v("表锁：锁住整张表，读锁互不阻塞，写锁阻塞其他所有读写锁（同一张表）。开销最小。")]),n._v(" "),l("li",[n._v("行级锁：对每一行数据（记录）加锁，开销大，并发程度高。")])]),n._v(" "),l("hr"),n._v(" "),l("h3",{attrs:{id:"innodb对死锁的处理-此处死锁与os死锁类似-多个事务互相持有对方所有要申请资源的锁不释放-造成环路死锁。mysql-innodb引擎检测到死锁循环依赖后-回滚持有最少行级锁的事务。"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#innodb对死锁的处理-此处死锁与os死锁类似-多个事务互相持有对方所有要申请资源的锁不释放-造成环路死锁。mysql-innodb引擎检测到死锁循环依赖后-回滚持有最少行级锁的事务。"}},[n._v("#")]),n._v(" InnoDB对死锁的处理：此处死锁与OS死锁类似，多个事务互相持有对方所有要申请资源的锁不释放，造成环路死锁。MySQL InnoDB引擎检测到死锁循环依赖后，回滚持有最少行级锁的事务。")])])}),[],!1,null,null,null);t.default=o.exports}}]);